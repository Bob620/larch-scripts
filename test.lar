import os
import math

version = '1.0.0'
edgeStartEnergy = 7118.5
edgeEndEnergy = 7123.5

baseUriRaw = input('Enter the directory Location: ')
outputNameRaw = input('Enter output project name(optional, enter for none): ')
metaFileNameRaw = input('Enter metadata file name(default: \'meta.csv\'): ')
defaultFormulaRaw = input('Enter a default formula(default: skips files without formula): ')
willGraphRaw = input('Do you want to graph these?(y/n default: n) ')

willGraph = False
if willGraphRaw.startswith('y'):
    willGraph = True
endif

if not baseUriRaw.endswith('/'):
	baseUriRaw += '/'
endif
baseUri = baseUriRaw.replace('\\', '/')

outputName = ''
if outputNameRaw is not '' and not outputNameRaw.endswith('.prj'):
	outputName = outputNameRaw + '.prj'
endif

metaName = 'meta.csv'
if metaFileNameRaw is not '':
	metaName = metaFileNameRaw
endif

defaultMeta = None
if defaultFormulaRaw is not '':
	defaultMeta = {'formula': defaultFormulaRaw}
endif

meta = {}
#defaultMeta = {'formula': 'Si1.849Ti0.044Al0.256Cr0Fe0.334Mn0.008Mg0.588Ca0.835Na0.128O6'}
#baseUri = 'C:/Users/EPMA_Castaing/work/avishek/testdata/test/'
#outputName = 'output.prj'

# 7118.5
# 7125.0

try:
	directory = None
	directory = os.scandir(baseUri)
except IOError:
	print('\nDirectory not accessible.\n')
else:
	try:
		fh = open(baseUri + metaName, 'r')
	except IOError:
		print('No meta file found\n')
		metaLines = []
	else:
		metaLines = fh.readlines()
		fh.close()
		print('Meta file read in')
	endtry

	names = []
	for line in metaLines:
		info = []
		info = line.strip('\n').split(',')

		if len(names) == 0:
			for name in info:
				names.append(name.strip())
			endfor
		else:
			if len(info) >= len(names):
				meta[info[0].strip()] = {'formula': info[1].strip()}
			endif
		endif
	endfor

	outputData = []

	for entry in directory:
		if entry.is_file():
			if entry.name.endswith('.001'):
				print('Reading in', entry.name, '...')
				try:
					file = read_ascii(entry.path, labels='energy 0 i0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Fe_Ka1 Fe_Ka2 Fe_Ka3 Fe_Ka4')
				except Exception:
					print('not able to read', entry.name)
				else:
					print('Getting metadata...')
					try:
						thisMeta = meta[entry.name]
					except Exception:
						print('No metadata found.')
						if defaultMeta is not None:
							print('Using default metadata')
							thisMeta = defaultMeta
						endif
					endtry
					if thisMeta is not None:
						formula = thisMeta['formula']
						print('Got metadata.')

						print('Calculating mu for fe_ka...')
						file.mu = (file.fe_ka1 + file.fe_ka2 + file.fe_ka3 + file.fe_ka4)/file.i0

						print('Calculating the Pre-Edge Subtraction/Normalization...')
						pre_edge(file, group=file, pre1=-67.40, pre2=-30.00, norm1=77.96, norm2=250.60)

						print('Calculating the Over Absorption...')
						fluo_corr(energy=file.energy, mu=file.mu, group=file, elem='Fe', formula=formula)

						print('Calculating the Baseline Subtraction...')
						pre_edge_baseline(energy=file, norm=file.norm_corr, group=file, emin=7105)

						outputData.append(file)
					endif
				endtry
			endif
		endif
	endfor

	directory.close()

    if willGraph and outputData[0] is not None:
        print('graphing', outputData[0].filename + '_abs_corr_' + version)
        newplot(outputData[0].energy, outputData[0].norm_corr, label=outputData[0].filename + '_abs_corr_1.0.0',
                xlabel='Energy (eV)',
                ylabel='normalized $ \mu(E) $',
                title='normalized abscorr $ \mu(E) $',
                show_legend=True,
                marker=None)
    endif

	for i in range(0, len(outputData)):
	    data = outputData[i]

        startIndexDiff = 0
        endIndexDiff = 0
        startIndex = 0
        endIndex = 0

        for j in range(0, len(data.energy)):
            startEnergyD = abs(data.energy[j] - edgeStartEnergy)
            if startEnergyD < abs(data.energy[startIndex] - edgeStartEnergy):
                startIndexDiff = abs(data.energy[startIndex] - edgeStartEnergy)
                startIndex = j
            endif

            endEnergyD = abs(data.energy[j] - edgeEndEnergy)
            if endEnergyD < abs(data.energy[endIndex] - edgeEndEnergy):
                endIndexDiff = abs(data.energy[startIndex] - edgeEndEnergy)
                endIndex = j
            endif
        endfor

	    startValue = data.norm_corr[startIndex]
	    endValue = data.norm_corr[endIndex]

	    linearLine = []
	    lastValue = startValue
	    for j in range(0, endIndex - startIndex):
	        linearLine.append(lastValue)
    	    lastValue += (endValue - startValue)/(endIndex - startIndex)
	    endfor


	    linearLine.append(endValue)

        farthestIndex = 0
        farthestDiff = 0
        for j in range(0, len(linearLine)):
            diff = data.norm_corr[startIndex + j] - linearLine[j]

            if diff > 0 and diff > farthestDiff:
                farthestDiff = diff
                farthestIndex = j
            endif
	    endfor

	    closestIndex = 0
	    closestDiff = 9999
	    for j in range(farthestIndex, len(linearLine)):
	        diff = data.norm_corr[startIndex + j] - linearLine[j]

	        if diff < closestDiff:
	            closestDiff = diff
	            closestIndex = j
	        else:
	            pass
	        endif
	    endfor

	    avgTangentSlope = ((data.norm_corr[farthestIndex - 1] - data.norm_corr[farthestIndex]) + (data.norm_corr[farthestIndex] - data.norm_corr[farthestIndex + 1]))/2
"""        tangentIntersectIndex = 0
        tangentIntersectDiff = 9999

	    for j in range(0, 1000):
	        diff = ((avgTangentSlope*j)+data.norm_corr[farthestIndex]) - data.norm_corr[closestIndex]

	        if diff < tangentIntersectDiff:
	            tangentIntersectDiff = diff
	            tangentIntersectIndex = j
	        endif
	    endfor
"""

        angle = 180 - abs(math.degrees(math.atan(avgTangentSlope)) - math.degrees(math.atan(0)))


    	print(data.filename, '   ', farthestIndex, '   ', data.norm_corr[farthestIndex + startIndex], '   ', data.energy[farthestIndex + startIndex], '   ', farthestDiff, '   ', closestDiff, '   ', closestIndex, '   ', angle)

        if willGraph:
            plot_marker(data.energy[farthestIndex + startIndex], data.norm_corr[farthestIndex + startIndex], marker='o')
            plot(data.energy[startIndex:endIndex+1], linearLine, marker=None, style='solid')
        endif
	endfor





	if outputName is not '':
		try:
			os.remove(baseUri + outputName + '_abs_corr_' + version + '.prj')
		except Exception:
			pass
		endtry

		outputProject = create_athena(baseUri + outputName + '_abs_corr_' + version + '.prj')
	endif

	for i in range(0, len(outputData)):
		data = outputData[i]

		data.filename = data.filename + '_abs_corr_' + version
		data.mufluor = data.norm_corr
		delattr(data, 'mu')

		if willGraph and i != 0:
			print('graphing', data.filename)
			plot(data.energy, data.norm_corr, label=data.filename, marker=None)
		endif

		if outputName is '':
			print('writing out data')
			try:
				os.remove(baseUri + data.filename + '.prj')
			except Exception:
				pass
			endtry

			outputProject = create_athena(baseUri + data.filename + '.prj')
			outputProject.add_group(data)
			outputProject.save()
		else:
			outputProject.add_group(data)
		endif
	endfor

	if outputName is not '':
		print('writing out data')
		outputProject.save()
	endif
endtry

print('cleaning up...')

baseUriRaw = None
outputNameRaw = None
metaFileNameRaw = None
defaultFormulaRaw = None
fh = None
metaLines = None
names = None
info = None
outputData = None
thisMeta = None
file = None
formula = None
outputProject = None
data = None
baseUri = None
outputName = None
metaName = None
meta = None
defaultMeta = None
version = None

directory = None


print('\n\nOutput Finished.')

#plot_prepeaks_baseline(dgroup=file)



"""
newplot(file.energy, file.norm, label='normalized $ \mu(E) $',
        xlabel='Energy (eV)',
        ylabel='normalized $ \mu(E) $',
        title='post-normalization ',
        show_legend=True)

newplot(file.energy, file.mu, label=' $ \mu(E) $ ',
        xlabel='Energy (eV)',
        ylabel='fe_ka/i0',
        title='pre-normalization ',
        show_legend=True)

plot(file.energy, file.pre_edge, label='pre-edge line',
     color='black', style='dashed' )

plot(file.energy, file.post_edge, label='normalization line',
     color='black', style='dotted' )
"""